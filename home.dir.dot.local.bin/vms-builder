#!/bin/bash
# -*- mode: bash; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t-*-
# vi: set ft=bash noet ci pi sts=0 sw=2 ts=2:
# st:
#
#
# # /usr/bin/env bash
#
# bash.sh:
#   Standard Template for bash/zsh developing.
#   Version: 20211230
#   License: MIT
#   Site: https://github/hedzr/bash.sh
#

#
# vms-builder
#
# License: Apache-2.0
# Description: `vms-builder` create a pxe-server so that new vm can boot fron LAN with it
# Version: 20211231
#

SUDO=sudo
[ "$(id -u)" = "0" ] && SUDO=

_default_passwd='$6$M8WnHMy5c6Mj$9hBKDqImDNSvhU.ANvrRfMW.qEmK0wZS1zExtGh0hkSc7kb4TTAC1q6TCC/MF806v5yXi8jZ/g6gHGchKb2Ko/'
TARGET_HOSTNAME="${TARGET_HOSTNAME:-ubuntu-server}"
TARGET_USERNAME="${TARGET_USERNAME:-hz}"
TARGET_PASSWORD="${TARGET_PASSWORD:-$_default_passwd}"
TARGET_LOCALE="${TARGET_LOCALE:-en_US.UTF-8}"
TARGET_SSH_KEYS=(
	"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxjcUOlmgsabCmeYD8MHnsVxueebIocv5AfG3mpmxA3UZu6GZqnp65ipbWL9oGtZK3BY+WytnbTDMYdVQWmYvlvuU6+HbOoQf/3z3rywkerbNQdffm5o9Yv/re6dlMG5kE4j78cXFcR11xAJvJ3vmM9tGSBBu68DR35KWz2iRUV8l7XV6E+XmkPkqJKr3IvrxdhM0KpCZixuz8z9krNue6NdpyELT/mvD5sL9LG4+XtU0ss7xH1jk5nmAQGaJW9IY8CVGy07awf0Du5CEfepmOH5gJbGwpAIIubAzGarefbltXteerB0bhyyC3VX0Q8lIHZ6GhMZSqfD9vBHRnDLIL"
)
TARGET_PKGS=(
	# net-tools
	# lsof
	curl
	wget
	# whois
)
TARGET_TIMEZONE=Asia/Chongqing

LOCAL_DOMAIN="ops.local"

DHCP_PRE=10.101.8
DHCP_SUBNET=$DHCP_PRE.0
DHCP_MASK=255.255.255.0
DHCP_DHCP_ROUTER=$DHCP_PRE.253   # it should be a router ip in most cases
DHCP_DHCP_SERVER=$DHCP_PRE.18  # IP address of 'pxe-server'
DHCP_RANGE="${DHCP_PRE}.100  ${DHCP_PRE}.150"  # the pool

PXE_IP=$DHCP_DHCP_SERVER
PXE_HOSTNAME="pxe-server" # BIOS name of PXE server, or IP address

ubuntu_codename=focal
ubuntu_version=20.04.3
ubuntu_iso=ubuntu-${ubuntu_version}-live-server-amd64.iso

ubuntu_mirrors=("mirrors.cqu.edu.cn" "mirrors.ustc.edu.cn" "mirrors.tuna.tsinghua.edu.cn" "mirrors.163.com" "mirrors.aliyun.com")

##################################################

##################################################

vms_entry() {
	headline "vms-builder is running"

	local ubuntu_iso_url="https://${ubuntu_mirrors[0]}/ubuntu-releases/${ubuntu_codename}/${ubuntu_iso}"
	local alternate_ubuntu_iso_url=${alternate_ubuntu_iso_url:-$ubuntu_iso_url}

	local tftp_dir=/srv/tftp
	local full_nginx=-full

	v_install   # install software packages: tftp, dhcp, nginx, etc
	v_config    # and configure its
	v_end       #
}

v_end() {
	echo && headline "$(fn_name)" && line 80
	[ -f /root/custom.sh ] && bash /root/custom.sh
}

v_config() {
	echo && headline "$(fn_name)" && line

	v_config_dirs
	v_download_iso

	v_config_boot
	v_config_grub

	v_config_bash_skel

	v_config_tftp
	v_config_dhcp
	v_config_nginx

	v_config_aif        # autoinstall files
}

v_config_dirs() {
	$SUDO mkdir -pv $tftp_dir/{autoinstall,bash,boot/live-server,cdrom,grub,iso,priv}
}

v_config_aif() {
	# autoinstall files
	$SUDO touch $tftp_dir/autoinstall/meta-data

	declare -a na
	local network_str="" str="" n=1 i
	na=($(ifconfig -s -a | tail -n +2 | grep -v '^lo' | awk '{print $1}'))
	for i in ${na[@]}; do
		[[ $n -gt 1 ]] && str=", " || str=""
		str="${str}${i}: {dhcp4: yes,dhcp6: yes}"
		network_str="${network_str}${str}"
		let n++
	done

	grep -qE '^#cloud-config' $tftp_dir/autoinstall/user-data || {
		cat <<-EOF | $SUDO tee $tftp_dir/autoinstall/user-data
			#cloud-config
			autoinstall:
			  version: 1
			  interactive-sections: []

			  # https://ubuntu.com/server/docs/install/autoinstall-reference
			  # https://ubuntu.com/server/docs/install/autoinstall-schema
			  apt:
			    primary:
			      - arches: [default]
			        uri: http://${ubuntu_mirrors[0]}/ubuntu
			    # geoip: true
			    # sources:
			    #   my-ppa.list:
			    #     source: "deb http://ppa.launchpad.net/curtin-dev/test-archive/ubuntu \$RELEASE main"
			    #     keyid: B59D 5F15 97A5 04B7 E230  6DCA 0620 BBCF 0368 3F77

			  user-data:
			    timezone: $TARGET_TIMEZONE
			    # Europe/London
			    disable_root: true
			    # openssl passwd -6 -salt 1234
			    # mkpasswd -m sha-512
			    chpasswd:
			      list: |
			        root: ${TARGET_PASSWORD}
			    runcmd:
			      - wget -P /root/ http://$PXE_HOSTNAME:3001/bash/boot.sh
			      - wget -P /root/ http://$PXE_HOSTNAME:3001/priv/gpg.key || echo "no gpg key, skipped"
			      - wget -P /root/ http://$PXE_HOSTNAME:3001/priv/custom.sh || echo "no custom.sh, skipped"
			      - bash /root/boot.sh
			      #- sed -ie 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=3/' /target/etc/default/grub

			  identity:
			    hostname: $TARGET_HOSTNAME
			    # username: ubuntu
			    # password: "\$6\$exDY1mhS4KUYCE/2\$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0"
			    username: $TARGET_USERNAME
			    password: "${TARGET_PASSWORD}"

			  keyboard: {layout: 'us', variant: ''}
			  # keyboard: {layout: 'gb', variant: 'devorak'}
			  locale: $TARGET_LOCALE

				#network:
				#  version: 2
				#  ethernets: { $network_str }

				#   enp0s33:
				#    dhcp4: yes
				#    dhcp6: yes

			  # network:
			  #   network:
			  #     version: 2
			  #     ethernets:
			  #       enp0s25:
			  #        dhcp4: yes
			  #       enp3s0: {}
			  #       enp4s0: {}
			  #     bonds:
			  #       bond0:
			  #         dhcp4: yes
			  #         interfaces:
			  #           - enp3s0
			  #           - enp4s0
			  #         parameters:
			  #           mode: active-backup
			  #           primary: enp3s0

			  # network:
			  #   version: 2
			  #   renderer: networkd
			  #   ethernets:
			  #     enp0s3:
			  #       dhcp4: no
			  #       addresses:
			  #         - 10.10.50.200/24
			  #       gateway4: 10.10.50.1
			  #       nameservers:
			  #         search:
			  #           - mynetwork.loc
			  #         addresses:
			  #           - 10.10.50.53
			  #           - 10.10.51.53

			  # proxy: http://192.168.0.72:7890
			  # proxy: ""

			  ssh:
			    allow-pw: no
			    install-server: true
			    authorized-keys: [$(n=1 && for arg in "${TARGET_SSH_KEYS[@]}"; do
				# arg=\"$arg\"
				[ $n -gt 1 ] && echo -n ", "
				echo -n "\"$arg\""
				let n++
			done)]

			  packages: [$(n=1 && for arg in "${TARGET_PKGS[@]}"; do
				# arg=\"$arg\"
				[ $n -gt 1 ] && echo -n ", "
				echo -n "\"$arg\""
				let n++
			done)]
			    # - net-tools
			    # - lsof
			    # - python3-pip
			    #- linux-generic-hwe-20.04-edge
			    #- curl
			    #- wget
			    # - whois   # mkpasswd -m sha-512

			  # snaps:
			  #   - name: go
			  #     channel: 1.16/stable
			  #     classic: true

			  #debconf-selections: |
			  #  bind9      bind9/run-resolvconf    boolean false

			  security: no

			  storage:
			    grub:
			      reorder_uefi: false
			    # config:
			    # - {ptable: gpt, path: /dev/sda, wipe: superblock-recursive, preserve: false, name: '', grub_device: false, type: disk, id: disk-sda}
			    # - {device: disk-sda, size: 536870912, wipe: superblock, flag: boot, number: 1, preserve: false, grub_device: true, type: partition, id: partition-0}
			    # - {fstype: fat32, volume: partition-0, preserve: false, type: format, id: format-0}
			    # - {device: disk-sda, size: -1, wipe: superblock, flag: '', number: 2, preserve: false, type: partition, id: partition-1}
			    # - {fstype: ext4, volume: partition-1, preserve: false, type: format, id: format-1}
			    # - {device: format-1, path: /, type: mount, id: mount-1}
			    # - {device: format-0, path: /boot/efi, type: mount, id: mount-0}
			    swap:
			      size: 0
			    config:
			      # https://askubuntu.com/questions/1244293/how-to-autoinstall-config-fill-disk-option-on-ubuntu-20-04-automated-server-in
			      - {ptable: gpt, path: /dev/sda, preserve: false, name: '', grub_device: false, type: disk, id: disk-sda}
			      
			      - {device: disk-sda, size: 536870912, wipe: superblock, flag: boot, number: 1, preserve: false, grub_device: true, type: partition, id: partition-sda1}
			      - {fstype: fat32, volume: partition-sda1, preserve: false, type: format, id: format-2}
			      
			      - {device: disk-sda, size: 1073741824, wipe: superblock, flag: linux, number: 2,
			        preserve: false, grub_device: false, type: partition, id: partition-sda2}
			      - {fstype: ext4, volume: partition-sda2, preserve: false, type: format, id: format-0}
			      
			      - {device: disk-sda, size: -1, flag: linux, number: 3, preserve: false,
			        grub_device: false, type: partition, id: partition-sda3}
			      - name: vg-0
			        devices: [partition-sda3]
			        preserve: false
			        type: lvm_volgroup
			        id: lvm-volgroup-vg-0
			      - {name: lv-root, volgroup: lvm-volgroup-vg-0, size: 100%, preserve: false, type: lvm_partition, id: lvm-partition-lv-root}
			      - {fstype: ext4, volume: lvm-partition-lv-root, preserve: false, type: format, id: format-1}
			      
			      - {device: format-1, path: /, type: mount, id: mount-2}
			      - {device: format-0, path: /boot, type: mount, id: mount-1}
			      - {device: format-2, path: /boot/efi, type: mount, id: mount-3}

			  # early-commands:
			  #   - echo "Welcome to Fashion!"
			  #   #- ping -c1 198.162.1.1

			  # late-commands:
			    #- curtin in-target --target=/target -- wget -P /root/ http://${PXE_HOSTNAME}:3001/bash/boot.sh
			    #- curtin in-target --target=/target -- bash /root/boot.sh
			    #- sed -ie 's/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=3/' /target/etc/default/grub

			  # error-commands:
			  #   - tar c /var/log/installer | nc 192.168.0.1 1000

		EOF
	}
}

v_config_nginx() {
	local f=/etc/nginx/sites-available/default
	grep -qE 'listen 3001' $f || {
		cat <<-EOF | $SUDO tee -a $f


			server {
			  listen 3001 default_server;
			  listen [::]:3001 default_server;
			  root $tftp_dir;
			  autoindex on;
			  autoindex_exact_size on;
			  autoindex_localtime on;
			  charset utf-8;
			  server_name _;
			}

			server {
			  listen 3003 default_server;
			  listen [::]:3003 default_server;
			  root $tftp_dir/autoinstall;
			  autoindex on;
			  autoindex_exact_size off;
			  autoindex_localtime on;
			  charset utf-8;
			  server_name _;
			}

		EOF
		$SUDO systemctl restart nginx.service
	}
}

v_config_dhcp() {
	local f=/etc/dhcp/dhcpd.conf
	$SUDO sed -i -r "s/option domain-name .+\$/option domain-name \"$LOCAL_DOMAIN\";/" $f
	$SUDO sed -i -r "s/option domain-name-servers .+\$/option domain-name-servers ns1.$LOCAL_DOMAIN, ns2.$LOCAL_DOMAIN;/" $f

	grep -qE "^subnet $DHCP_SUBNET netmask" $f || {
		cat <<-EOF | $SUDO tee -a $f

			# https://kb.isc.org/v1/docs/isc-dhcp-44-manual-pages-dhcpdconf
			subnet $DHCP_SUBNET netmask $DHCP_MASK {
			    option routers             $DHCP_DHCP_ROUTER;
			    option domain-name-servers 114.114.114.114;
			    option subnet-mask         $DHCP_MASK;
			    range dynamic-bootp        $DHCP_RANGE;
			    default-lease-time         21600;
			    max-lease-time             43200;
			    next-server                $DHCP_DHCP_SERVER;
			    filename "pxelinux.0";
			    # filename "grubx64.efi";
			}

		EOF
	}

	$SUDO systemctl restart isc-dhcp-server.service
}

v_config_tftp() {
	cat /etc/default/tftpd-hpa
}

v_config_bash_skel() {
	[ -f $tftp_dir/bash/boot.sh ] || {
		cat <<-"EOF" | $SUDO tee $tftp_dir/bash/boot.sh
			#!/bin/bash
			# -*- mode: bash; c-basic-offset: 2; tab-width: 2; indent-tabs-mode: t-*-
			# vi: set ft=bash noet ci pi sts=0 sw=2 ts=2:
			# st: 
			#

			echo "booted."
			[ -f custom.sh ] && bash custom.sh

		EOF
	}

	#
	$SUDO touch $tftp_dir/priv/gpg.key
	$SUDO touch $tftp_dir/priv/custom.sh
}

v_config_grub() {
	local tgt=$tftp_dir/grub

	# [ -f $tgt/bootx64.efi ] || $SUDO cp .. ..
	[ -f $tftp_dir/pxelinux.0 ] || {
		$SUDO wget http://archive.ubuntu.com/ubuntu/dists/${ubuntu_codename}/main/uefi/grub2-amd64/current/grubnetx64.efi.signed -O $tftp_dir/pxelinux.0
	}

	[ -f $tgt/font.pf2 ] || $SUDO cp $tftp_dir/cdrom/boot/grub/font.pf2 $tgt/

	[ -f $tgt/grub.cfg ] || {
		cat <<-EOF | $SUDO tee $tgt/grub.cfg

			if loadfont /boot/grub/font.pf2 ; then
			  set gfxmode=auto
			  insmod efi_gop
			  insmod efi_uga
			  insmod gfxterm
			  terminal_output gfxterm
			fi

			set menu_color_normal=white/black
			set menu_color_highlight=black/light-gray

			set timeout=3

			menuentry "Ubuntu server 20.04 autoinstall" --id=autoinstall {
			    echo "Loading Kernel..."
			    # make sure to escape the ';' or surround argument in quotes
			    linux /boot/live-server/vmlinuz ramdisk_size=1500000 ip=dhcp url="http://${PXE_IP}:3001/iso/ubuntu-${ubuntu_version}-live-server-amd64.iso" autoinstall ds="nocloud-net;s=http://${PXE_IP}:3001/autoinstall/" root=/dev/ram0 cloud-config-url=/dev/null
			    echo "Loading Ram Disk..."
			    #linux  /boot/live-server/vmlinuz root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url='http://${PXE_HOSTNAME}:3001/iso/ubuntu-${ubuntu_version}-live-server-amd64.iso' autoinstall ds=nocloud-net\;s=http://${PXE_HOSTNAME}:3001/autoinstall/ ---
			    initrd /boot/live-server/initrd
			}

			menuentry "Install Ubuntu Server [NEVER USED]" {
			    set gfxpayload=keep
			    linux  /casper/vmlinuz   quiet  ---
			    initrd /casper/initrd
			}

			grub_platform
			# END OF grub.cfg
		EOF
	}
}

v_config_boot() {
	# boot files
	local tgt=$tftp_dir/boot/live-server
	[ -f $tgt/vmlinuz ] || {
		$SUDO cp $tftp_dir/cdrom/casper/vmlinuz $tgt/
		$SUDO cp $tftp_dir/cdrom/casper/initrd $tgt/
	}
}

v_install() {
	echo && headline "$(fn_name)" && line

	v_install_tftp_server
	v_install_dhcp_server
	v_install_web_server
}

v_install_tftp_server() {
	headline "$(fn_name)"
	install_packages tftpd-hpa
}

v_install_dhcp_server() {
	headline "$(fn_name)"
	install_packages isc-dhcp-server
}

v_install_web_server() {
	headline "$(fn_name)"
	install_packages nginx$full_nginx
}

v_download_iso() {
	headline "$(fn_name)"
	local tgt=$tftp_dir/iso/$ubuntu_iso
	[ -f $tgt ] || {
		wget "$alternate_ubuntu_iso_url" -O $tgt
	}

	grep -qE "$tftp_dir/iso/" /etc/fstab || {
		echo "$tftp_dir/iso/$ubuntu_iso $tftp_dir/cdrom    iso9660     ro,loop    0 0" | $SUDO tee -a /etc/fstab
		$SUDO mount -a && ls -la --color $tftp_dir/cdrom
	}
}

##################################################

##################################################

##################################################
# UBUNTU / DEBIAN Packages

is_package_installed() {
	is_yum && {
		if $SUDO yum list installed "$@" >/dev/null 2>&1; then
			true
		else
			false
		fi
		return
	}
	is_apt && {
		if dpkg --get-selections | grep -Pi "$1[ \t]+install" 1>/dev/null; then
			echo "    $1 exists" && return 0
		else
			return 1
		fi
	}
}

is_packages_all_installed() {
	is_yum && {
		if $SUDO yum list installed "$@" >/dev/null 2>&1; then
			true
		else
			false
		fi
		return
	}
	is_apt && {
		for pkg in "$@"; do
			if dpkg --get-selections | grep -qPi "$1[ \t]+install"; then
				echo "    $1 exists" && continue
			else
				return 1
			fi
		done
		return 0
	}
}

is_packages_any_installed() {
	is_yum && {
		if $SUDO yum list installed "$@" >/dev/null 2>&1; then
			true
		else
			false
		fi
		return
	}
	is_apt && {
		for pkg in "$@"; do
			if dpkg --get-selections | grep -qPi "$1[ \t]+install"; then
				echo "    $1 exists" && return 0
			else
				continue
			fi
		done
		return 1
	}
}

# TODO
is_package_lower() {
	local RES
	RES=$(dpkg --get-selections | grep -Pi "$1[ \t]+install")
	# shellcheck disable=SC2181
	if [[ $? -eq 0 ]]; then echo "    $1 exists" && echo "$RES" && return 0; else return 1; fi
}

package_list() { sudo yum list "$@"; }
package_list_installed() { $SUDO yum list installed "$@"; }

install_packages() {
	declare -a RR
	if is_yum; then
		for pkg in "$@"; do
			if $SUDO yum list installed "$pkg" >/dev/null 2>&1; then
				echo "    $pkg exists"
			else
				RR=("${RR[@]}" "$pkg")
			fi
		done
		if [[ ${#RR[@]} -gt 0 ]]; then
			echo "  TO BE INSTALLING: ${RR[*]}..."
			$SUDO yum install -y "${RR[@]}" && return 0
		else
			return 1
		fi
	else
		for pkg in "$@"; do
			if $SUDO dpkg --get-selections | grep -qPi "$pkg[ \t]+install"; then
				echo "    $pkg exists"
			else
				RR=("${RR[@]}" "$pkg")
			fi
		done

		if [[ ${#RR[@]} -gt 0 ]]; then
			echo "  TO BE INSTALLING: ${RR[*]}..."
			$SUDO apt-get install -y --force-yes "${RR[@]}" && return 0
		else
			return 1
		fi
	fi
}
install-packages() { install_packages "$@"; }
package-install() { install_packages "$@"; }

##################################################

lines() { for ((i = 0; i < ${1:-3}; i++)); do echo ""; done; }
# line() { debug_begin && printf -- '=%.0s' {1..72} && debug_end; }
line() { debug_begin && local num="${1:-72}" && printf -- "${2:-=}%.0s" $(seq 1 $num) && debug_end; }

##################################################

list_all_env_variables() { declare -xp; }
list_all_variables() { declare -p; }

env_check() {
	cat <<-EOC
		###################### Checks
								 in_debug: $(in_debug && echo Y || echo '-')
									is_root: $(is_root && echo Y || echo '-')
									is_bash: $(is_bash && echo Y || echo '-')
							 is_bash_t2: $(is_bash_t2 && echo Y || echo '-')
									 is_zsh: $(is_zsh && echo Y || echo '-')
							in_sourcing: $(in_sourcing && echo Y || echo '-')
		 is_interactive_shell: $(is_interactive_shell && echo Y || echo '-')

									 centos: $(if_centos && echo Y)
									 ubuntu: $(if_ubuntu && echo Y)
											mac: $(if_mac && echo Y)
									vagrant: $(if_vagrant && echo Y)

									 aliyun: $(if_aliyun && echo Y)
							 aliyun vpc: $(if_aliyun_vpc && echo Y)
											aws: $(if_aws && echo Y)
									 aws_cn: $(if_aws_cn && echo Y)
									 aws_us: $(if_aws_us && echo Y)
						aws_linux_ami: $(if_aws_linux_ami && echo Y)
									 qcloud: $(if_qcloud && echo Y)
	EOC
}
env-check() { env_check; }

##################################################

# Usages:
#  $ DEBUG=1 ./bash.sh cool
#  $ DEBUG=1 ./bash.sh
#
#  $ ./bash.sh 'is_root && echo Y'
#  $ sudo ./bash.sh 'is_root && echo Y'
#  $ sudo DEBUG=1 ./bash.sh 'is_root && echo y'
#
#  $ HAS_END=: ./bash.sh
#  $ HAS_END=false ./bash.sh
#

vms_test() {
	echo $(for arg in "${TARGET_SSH_KEYS[@]}"; do
		# arg=\"$arg\"
		[ $n -gt 1 ] && echo -n ", "
		echo -n "\"$arg\""
		let n++
	done)
}
vms_cool() { echo cool fn=$(fn_name); }
vms_sleeping() { echo sleeping; }
_my_main_do_sth() {
	local cmd=${1:-entry} && { [ $# -ge 1 ] && shift; } || :
	# for linux only:
	# local cmd=${1:-sleeping} && && shift || :

	# echo "$cmd - $@"
	eval "vms_$cmd $@" || :
}

#### HZ Tail BEGIN ####
in_debug() { [[ $DEBUG -eq 1 ]]; }
is_root() { [ "$(id -u)" = "0" ]; }
is_bash() { is_bash_t1 || is_bush_t2; }
is_bash_t1() { [ -n "$BASH_VERSION" ]; }
is_bash_t2() { [ ! -n "$BASH" ]; }
is_zsh() { [ -n "$ZSH_NAME" ]; }
is_zsh_t1() { [[ $SHELL == */zsh ]]; }
is_zsh_t2() { [ -n "$ZSH_NAME" ]; }
is_darwin() { [[ $OSTYPE == *darwin* ]]; }
is_linux() { [[ $OSTYPE == *linux* ]]; }
in_sourcing() { is_zsh && [[ "$ZSH_EVAL_CONTEXT" == toplevel* ]] || [[ $(basename -- "$0") != $(basename -- "${BASH_SOURCE[0]}") ]]; }
is_interactive_shell() { [[ $- == *i* ]]; }
is_not_interactive_shell() { [[ $- != *i* ]]; }
is_ps1() { [ -z "$PS1" ]; }
is_not_ps1() { [ ! -z "$PS1" ]; }
is_stdin() { [ -t 0 ]; }
is_not_stdin() { [ ! -t 0 ]; }
fn_exists() { LC_ALL=C type $1 | grep -q 'shell function'; }
fn_builtin_exists() { LC_ALL=C type $1 | grep -q 'shell builtin'; }
fn_aliased_exists() { LC_ALL=C type $1 | grep -qE '(alias for)|(aliased to)'; }
fn_name() {
	is_zsh && echo "${funcstack[2]}" || {
		is_bash && echo "${FUNCNAME[1]}"
	}
}
fn_name_dyn() {
	local currentShell=$(ps -p $$ | awk "NR==2" | awk '{ print $4 }' | tr -d '-')
	if [[ $currentShell == 'bash' ]]; then
		echo ${FUNCNAME[1]}
	elif [[ $currentShell == 'zsh' ]]; then
		echo ${funcstack[2]}
	else
		echo "unknown func name ($currentShell)"
	fi
}
user_shell() { grep -E "^${1:-$USER}:" /etc/passwd | awk -F: '{print $7}'; }
home_dir() { grep -E "^${1:-$USER}:" /etc/passwd | awk -F: '{print $6}'; }
homedir_s() {
	local name=${1:-$USER}
	local home=/home/$name
	[ "$name" = "root" ] && home=/root
	echo $home
}
if_zero_or_empty() {
	if [ ! -z "$1" ]; then
		[[ "$1" -eq 0 ]]
	fi
}
if_non_zero_and_empty() {
	if [ ! -z "$1" ]; then
		[[ "$1" -ne 0 ]]
	else
		false
	fi
}
#
#
#
if_nix() {
	case "$OSTYPE" in
	*linux* | *hurd* | *msys* | *cygwin* | *sua* | *interix*) sys="gnu" ;;
	*bsd* | *darwin*) sys="bsd" ;;
	*sunos* | *solaris* | *indiana* | *illumos* | *smartos*) sys="sun" ;;
	esac
	[[ "${sys}" == "$1" ]]
}
if_mac() { [[ $OSTYPE == *darwin* ]]; }
if_ubuntu() {
	if [[ $OSTYPE == *linux* ]]; then
		[ -f /etc/os-release ] && grep -qi 'ubuntu' /etc/os-release
	else
		false
	fi
}
if_vagrant() {
	[ -d /vagrant ]
}
if_centos() {
	if [[ $OSTYPE == *linux* ]]; then
		if [ -f /etc/centos-release ]; then
			:
		else
			[ -f /etc/issue ] && grep -qPi '(centos|(Amazon Linux AMI))' /etc/issue
		fi
	else
		false
	fi
}
#
#
#
osid() { # fedora / ubuntu
	[[ -f /etc/os-release ]] && {
		grep -Eo '^ID="?(.+)"?' /etc/os-release | sed -r -e 's/^ID="?(.+)"?/\1/'
	}
}
versionid() { # 33 / 20.04
	[[ -f /etc/os-release ]] && {
		grep -Eo '^VERSION_ID="?(.+)"?' /etc/os-release | sed -r -e 's/^VERSION_ID="?(.+)"?/\1/'
	}
}
variantid() { # server, desktop
	[[ -f /etc/os-release ]] && {
		grep -Eo '^VARIANT_ID="?(.+)"?' /etc/os-release | sed -r -e 's/^VARIANT_ID="?(.+)"?/\1/'
	}
}
#
is_fedora() { [[ "$osid" == fedora ]]; }
is_centos() { [[ "$osid" == centos ]]; }
is_redhat() { [[ "$osid" == redhat ]]; }
is_debian() { [[ "$osid" == debian ]]; }
is_ubuntu() { [[ "$osid" == ubuntu ]]; }
is_debian() { [[ "$osid" == debian ]]; }
is_yum() { which yum 2>/dev/null; }
is_dnf() { which dnf 2>/dev/null; }
is_apt() { which apt 2>/dev/null; }
is_redhat_series() { is_yum || is_dnf; }
is_debian_series() { is_apt; }
#
#
#
uname_kernel() { uname -s; } # Linux
uname_cpu() { uname -p; }    # processor: x86_64
uname_mach() { uname -m; }   # machine:   x86_64, ...
uname_rev() { uname -r; }    # kernel-release: 5.8.15-301.fc33.x86_64
uname_ver() { uname -v; }    # kernel-version:
lscpu_call() { lscpu $*; }
lshw_cpu() { sudo lshw -c cpu; }
i386_amd64() { dpkg --print-architecture; }
x86_64() { uname -m; }
#
#
#
headline() { printf "\e[0;1m$@\e[0m:\n"; }
headline_begin() { printf "\e[0;1m"; } # for more color, see: shttps://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
headline_end() { printf "\e[0m:\n"; }  # https://misc.flogisoft.com/bash/tip_colors_and_formatting
printf_black() { printf "\e[0;30m$@\e[0m:\n"; }
printf_red() { printf "\e[0;31m$@\e[0m:\n"; }
printf_green() { printf "\e[0;32m$@\e[0m:\n"; }
printf_yellow() { printf "\e[0;33m$@\e[0m:\n"; }
printf_blue() { printf "\e[0;34m$@\e[0m:\n"; }
printf_purple() { printf "\e[0;35m$@\e[0m:\n"; }
printf_cyan() { printf "\e[0;36m$@\e[0m:\n"; }
printf_white() { printf "\e[0;37m$@\e[0m:\n"; }
debug() { in_debug && printf "\e[0;38;2;133;133;133m$@\e[0m\n" || :; }
debug_begin() { printf "\e[0;38;2;133;133;133m"; }
debug_end() { printf "\e[0m\n"; }
dbg() { ((DEBUG)) && printf ">>> \e[0;38;2;133;133;133m$@\e[0m\n" || :; }
debug_info() {
	debug_begin
	cat <<-EOF
		               in_debug: $(in_debug && echo Y || echo '-')
		                is_root: $(is_root && echo Y || echo '-')
		                is_bash: $(is_bash && echo Y || echo '-')
		                 is_zsh: $(is_zsh && echo Y || echo '-')
		            in_sourcing: $(in_sourcing && echo Y || echo '-')   # ZSH_EVAL_CONTEXT = $ZSH_EVAL_CONTEXT
		   is_interactive_shell: $(is_interactive_shell && echo Y || echo '-')
	EOF
	debug_end
}
commander() {
	local self=$1
	shift
	local cmd=${1:-usage}
	[ $# -eq 0 ] || shift
	#local self=${FUNCNAME[0]}
	case $cmd in
	help | usage | --help | -h | -H) "${self}_usage" "$@" ;;
	funcs | --funcs | --functions | --fn | -fn) script_functions "^$self" ;;
	*)
		if [ "$(type -t ${self}_${cmd}_entry)" == "function" ]; then
			"${self}_${cmd}_entry" "$@"
		else
			"${self}_${cmd}" "$@"
		fi
		;;
	esac
}
script_functions() {
	# shellcheck disable=SC2155
	local fncs=$(declare -F -p | cut -d " " -f 3 | grep -vP "^[_-]" | grep -vP "\\." | grep -vP "^[A-Z]") # Get function list
	if [ $# -eq 0 ]; then
		echo "$fncs" # not quoted here to create shell "argument list" of funcs.
	else
		echo "$fncs" | grep -P "$@"
	fi
	#declare MyFuncs=($(script.functions));
}
main_do_sth() {
	set -e
	trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
	trap '[ $? -ne 0 ] && echo FAILED COMMAND: $previous_command with exit code $?' EXIT
	MAIN_DEV=${MAIN_DEV:-eth0}
	MAIN_ENTRY=${MAIN_ENTRY:-_my_main_do_sth}
	# echo $MAIN_ENTRY - "$@"
	in_debug && {
		debug_info
		echo "$SHELL : $ZSH_NAME - $ZSH_VERSION | BASH_VERSION = $BASH_VERSION"
		[ -n "$ZSH_NAME" ] && echo "x!"
	}
	$MAIN_ENTRY "$@"
	trap - EXIT
	${HAS_END:-$(false)} && { debug_begin && echo -n 'Success!' && debug_end; } || :
}
DEBUG=${DEBUG:-0}
trans_readlink() { DIR="${1%/*}" && (cd $DIR && pwd -P); }
is_darwin && realpathx() { [[ $1 == /* ]] && echo "$1" || { DIR="${1%/*}" && DIR=$(cd $DIR && pwd -P) && echo "$DIR/$(basename $1)"; }; } || realpathx() { readlink -f $*; }
in_sourcing && { CD=${CD} && debug ">> IN SOURCING, \$0=$0, \$_=$_"; } || { SCRIPT=$(realpathx $0) && CD=$(dirname $SCRIPT) && debug ">> '$SCRIPT' in '$CD', \$0='$0','$1'."; }
main_do_sth "$@"
#### HZ Tail END ####
